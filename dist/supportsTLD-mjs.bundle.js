"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkdapp"] = self["webpackChunkdapp"] || []).push([["supportsTLD-mjs"],{

/***/ "./node_modules/@ensdomains/ensjs/dist/esm/functions/supportsTLD.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@ensdomains/ensjs/dist/esm/functions/supportsTLD.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ supportsTLD_default)\n/* harmony export */ });\n/* harmony import */ var _generated_factories_DNSRegistrar_factory_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../generated/factories/DNSRegistrar__factory.mjs */ \"./node_modules/@ensdomains/ensjs/dist/esm/generated/factories/DNSRegistrar__factory.mjs\");\n// src/functions/supportsTLD.ts\n\nvar DNSSEC_CLAIM_INTERFACE_IDS = [\"0x2f435428\", \"0x17d8f49b\", \"0x1aa2e641\"];\nasync function supportsTLD_default({ getOwner, provider }, name) {\n  try {\n    const labels = name.split(\".\");\n    const tld = labels[labels.length - 1];\n    if (tld === \"eth\")\n      return true;\n    const tldOwner = await getOwner(tld, { contract: \"registry\" });\n    if (!tldOwner?.owner)\n      return false;\n    const dnsRegistrar = _generated_factories_DNSRegistrar_factory_mjs__WEBPACK_IMPORTED_MODULE_0__.DNSRegistrar__factory.connect(\n      tldOwner.owner,\n      provider\n    );\n    const supports = await Promise.all(\n      DNSSEC_CLAIM_INTERFACE_IDS.map(\n        (interfaceId) => dnsRegistrar.supportsInterface(interfaceId)\n      )\n    );\n    return supports.some((s) => !!s);\n  } catch {\n    return false;\n  }\n}\n\n\n\n//# sourceURL=webpack://dapp/./node_modules/@ensdomains/ensjs/dist/esm/functions/supportsTLD.mjs?");

/***/ }),

/***/ "./node_modules/@ensdomains/ensjs/dist/esm/generated/factories/DNSRegistrar__factory.mjs":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@ensdomains/ensjs/dist/esm/generated/factories/DNSRegistrar__factory.mjs ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DNSRegistrar__factory: () => (/* binding */ DNSRegistrar__factory)\n/* harmony export */ });\n/* harmony import */ var _ethersproject_abi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/abi */ \"./node_modules/@ethersproject/abi/lib.esm/interface.js\");\n/* harmony import */ var _ethersproject_contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/contracts */ \"./node_modules/@ethersproject/contracts/lib.esm/index.js\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/generated/factories/DNSRegistrar__factory.ts\n\n\nvar _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract DNSSEC\",\n        name: \"_dnssec\",\n        type: \"address\"\n      },\n      {\n        internalType: \"contract PublicSuffixList\",\n        name: \"_suffixes\",\n        type: \"address\"\n      },\n      {\n        internalType: \"contract ENS\",\n        name: \"_ens\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"node\",\n        type: \"bytes32\"\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\"\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"dnsname\",\n        type: \"bytes\"\n      }\n    ],\n    name: \"Claim\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"oracle\",\n        type: \"address\"\n      }\n    ],\n    name: \"NewOracle\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"suffixes\",\n        type: \"address\"\n      }\n    ],\n    name: \"NewPublicSuffixList\",\n    type: \"event\"\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"name\",\n        type: \"bytes\"\n      },\n      {\n        internalType: \"bytes\",\n        name: \"proof\",\n        type: \"bytes\"\n      }\n    ],\n    name: \"claim\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"ens\",\n    outputs: [\n      {\n        internalType: \"contract ENS\",\n        name: \"\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"oracle\",\n    outputs: [\n      {\n        internalType: \"contract DNSSEC\",\n        name: \"\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"name\",\n        type: \"bytes\"\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes\",\n            name: \"rrset\",\n            type: \"bytes\"\n          },\n          {\n            internalType: \"bytes\",\n            name: \"sig\",\n            type: \"bytes\"\n          }\n        ],\n        internalType: \"struct DNSSEC.RRSetWithSignature[]\",\n        name: \"input\",\n        type: \"tuple[]\"\n      },\n      {\n        internalType: \"bytes\",\n        name: \"proof\",\n        type: \"bytes\"\n      }\n    ],\n    name: \"proveAndClaim\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"name\",\n        type: \"bytes\"\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes\",\n            name: \"rrset\",\n            type: \"bytes\"\n          },\n          {\n            internalType: \"bytes\",\n            name: \"sig\",\n            type: \"bytes\"\n          }\n        ],\n        internalType: \"struct DNSSEC.RRSetWithSignature[]\",\n        name: \"input\",\n        type: \"tuple[]\"\n      },\n      {\n        internalType: \"bytes\",\n        name: \"proof\",\n        type: \"bytes\"\n      },\n      {\n        internalType: \"address\",\n        name: \"resolver\",\n        type: \"address\"\n      },\n      {\n        internalType: \"address\",\n        name: \"addr\",\n        type: \"address\"\n      }\n    ],\n    name: \"proveAndClaimWithResolver\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract DNSSEC\",\n        name: \"_dnssec\",\n        type: \"address\"\n      }\n    ],\n    name: \"setOracle\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract PublicSuffixList\",\n        name: \"_suffixes\",\n        type: \"address\"\n      }\n    ],\n    name: \"setPublicSuffixList\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"suffixes\",\n    outputs: [\n      {\n        internalType: \"contract PublicSuffixList\",\n        name: \"\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"interfaceID\",\n        type: \"bytes4\"\n      }\n    ],\n    name: \"supportsInterface\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\"\n      }\n    ],\n    stateMutability: \"pure\",\n    type: \"function\"\n  }\n];\nvar DNSRegistrar__factory = class {\n  static createInterface() {\n    return new _ethersproject_abi__WEBPACK_IMPORTED_MODULE_0__.Interface(_abi);\n  }\n  static connect(address, signerOrProvider) {\n    return new _ethersproject_contracts__WEBPACK_IMPORTED_MODULE_1__.Contract(address, _abi, signerOrProvider);\n  }\n};\n__publicField(DNSRegistrar__factory, \"abi\", _abi);\n\n\n\n//# sourceURL=webpack://dapp/./node_modules/@ensdomains/ensjs/dist/esm/generated/factories/DNSRegistrar__factory.mjs?");

/***/ })

}]);